/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import dao.ProductDao;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.Product;

/**
 *
 * @author admin
 */
public final class NhapHang extends javax.swing.JPanel {

    /**
     * Creates new form NhapHang
     */
    private ProductDao productDao;
    
    private final String [] columnNames = new String [] {
            "Mã hàng", "Tên hàng hoá", "Thể loại", "Giá", "Số lượng"};
    public NhapHang() {
        initComponents();
        maHang.setEditable(false);  
//        productDao = new ProductDao();
//        showListProducts(productDao.getListProduct());
//        addAddProductListener(new AddProductListener());
//        addEdiProductListener(new EditProductListener());
//        addDeleteProductListener(new DeleteProductListener());
//        addClearListener(new ClearProductListener());
//        addSortStudentNameListener(new SortProductNameListener());
//        addSortProductPriceListener(new SortProductPriceListener());
//        addListStudentSelectionListener(new ListProductSelectionListener()); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        type = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        maHang = new javax.swing.JTextField();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        nameSort = new javax.swing.JButton();
        priceSort = new javax.swing.JButton();

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã hàng", "Tên hàng hoá", "Thể loại", "Giá", "Số lượng"
            }
        ));
        jScrollPane1.setViewportView(ProductTable);
        if (ProductTable.getColumnModel().getColumnCount() > 0) {
            ProductTable.getColumnModel().getColumn(0).setMaxWidth(100);
            ProductTable.getColumnModel().getColumn(1).setMaxWidth(200);
            ProductTable.getColumnModel().getColumn(2).setMaxWidth(200);
            ProductTable.getColumnModel().getColumn(3).setMaxWidth(75);
            ProductTable.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        jLabel1.setBackground(new java.awt.Color(0, 255, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BẢNG THỐNG KÊ HÀNG HOÁ");

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        jLabel2.setBackground(new java.awt.Color(0, 255, 204));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("NHẬP HÀNG HOÁ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Tên hàng hoá");

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Thể loại");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Giá");

        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thuc an", "Do uong", "Do dung ca nhan", "Do dung hoc tap", "Dung cu ve sinh" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Số lượng");

        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        add.setText("Thêm");

        clear.setText("Làm mới");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Mã hàng");

        maHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maHangActionPerformed(evt);
            }
        });

        edit.setText("Sửa");

        delete.setText("Xoá");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(67, 67, 67))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maHang)
                    .addComponent(name)
                    .addComponent(quantity)
                    .addComponent(price)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        nameSort.setText("Sắp xếp theo tên");

        priceSort.setText("Sắp xếp theo giá");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(nameSort, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priceSort, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSort, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceSort, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    private void maHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maHangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maHangActionPerformed
    public void showListProducts(List<Product> list) 
    {
        int size = list.size();
        // với bảng studentTable có 5 cột, 
        // khởi tạo mảng 2 chiều students, trong đó:
        // số hàng: là kích thước của list student 
        // số cột: là 5
        Object [][] product = new Object[size][5];
        for (int i = 0; i < size; i++) {
            product[i][0] = list.get(i).getMaHang();
            product[i][1] = list.get(i).getName();
            product[i][2] = list.get(i).getType();
            product[i][3] = list.get(i).getPrice();
            product[i][4] = list.get(i).getQuantity();
        }
        ProductTable.setModel(new DefaultTableModel(product, columnNames));
    }
    
    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    
    public void fillProductFromSelectedRow() {
        // lấy chỉ số của hàng được chọn 
        int row = ProductTable.getSelectedRow();
        if (row >= 0) {
            maHang.setText(ProductTable.getModel().getValueAt(row, 0).toString());
            name.setText(ProductTable.getModel().getValueAt(row, 1).toString());
            type.setSelectedItem(ProductTable.getModel().getValueAt(row, 2).toString());
            price.setText(ProductTable.getModel().getValueAt(row, 3).toString());
            quantity.setText(ProductTable.getModel().getValueAt(row, 4).toString());
            
            // enable Edit and Delete buttons
            edit.setEnabled(true);
            delete.setEnabled(true);
            // disable Add button
            add.setEnabled(false);
        }
    }
    
    public void clearProductInfo() {
        maHang.setText("");
        name.setText("");
        type.setSelectedIndex(0);
        price.setText("");
        quantity.setText("");
        // disable Edit and Delete buttons
        edit.setEnabled(false);
        delete.setEnabled(false);
        // enable Add button
        add.setEnabled(true);
    }
    
    public void showProduct(Product product) {
        maHang.setText(product.getMaHang());
        name.setText(product.getName());
        type.setSelectedItem(product.getType());
        price.setText("" + product.getPrice());
        quantity.setText("" + product.getQuantity());
        // disable Edit and Delete buttons
        edit.setEnabled(false);
        delete.setEnabled(false);
        // enable Add button
        add.setEnabled(true);
    }
    
    private boolean validateName() {
        String nameProduct = name.getText();
        if (nameProduct == null || "".equals(nameProduct.trim())) {
            name.requestFocus();
            showMessage("Tên hàng không được trống.");
            return false;
        }
        return true;
    }
    
    private boolean validatePrice() {
        String priceProduct = price.getText();
        if (priceProduct == null || "".equals(priceProduct.trim())) {
            price.requestFocus();
            showMessage("Giá không được trống.");
            return false;
        }
        return true;
    }
    
    private boolean validateQuantity() {
        try {
            int quantityProduct = Integer.parseInt(quantity.getText().trim());
            if (quantityProduct < 0) {
                quantity.requestFocus();
                showMessage("Số lượng không hợp lệ, phải lơn hơn 0.");
                return false;
            }
        } catch (Exception e) {
            quantity.requestFocus();
            showMessage("Số lượng không hợp lệ!");
            return false;
        }
        return true;
    }
    
    public Product getProductInfo() {
        // validate student
        if (!validateName() || !validatePrice() || !validateQuantity()) {
            return null;
        }
        try {
            Product product = new Product();
            if (maHang.getText() != null && !"".equals(maHang.getText())) {
                product.setMaHang(maHang.getText().trim());
            }
            product.setName(name.getText().trim());
            product.setPrice(Integer.parseInt(price.getText().trim()));
            product.setQuantity(Integer.parseInt(quantity.getText().trim()));
            if (type.getSelectedIndex() != -1) {
                    product.setType(type.getItemAt(type.getSelectedIndex()));
                }
            return product;
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
        return null;
    }
    
    public void actionPerformed(ActionEvent e) {
    }
    
    public void valueChanged(ListSelectionEvent e) {
    }
    
    public void addAddProductListener(ActionListener listener) {
        add.addActionListener(listener);
    }
    
    public void addEdiProductListener(ActionListener listener) {
        edit.addActionListener(listener);
    }
    
    public void addDeleteProductListener(ActionListener listener) {
        delete.addActionListener(listener);
    }
    
    public void addClearListener(ActionListener listener) {
        clear.addActionListener(listener);
    }
    
    public void addSortProductPriceListener(ActionListener listener) {
        priceSort.addActionListener(listener);
    }
    
    public void addSortStudentNameListener(ActionListener listener) {
        nameSort.addActionListener(listener);
    }
    
    public void addListStudentSelectionListener(ListSelectionListener listener) {
        ProductTable.getSelectionModel().addListSelectionListener(listener);
    }
    
//    class AddProductListener implements ActionListener {
//        public void actionPerformed(ActionEvent e) {
//            Product product = getProductInfo();
//            if (product != null) 
//            {
//                List<Product> productLst = productDao.getListProduct();
//                for (int i = 0; i < productLst.size(); i++)
//                {
//                    if (productLst.get(i).getName().equalsIgnoreCase(product.getName()))
//                    {
//                        productLst.get(i).setQuantity(productLst.get(i).getQuantity() + product.getQuantity());
//                        productDao.edit(productLst.get(i));
//                        break;
//                    }
//                    if (i == productLst.size() - 1)
//                    {
//                        productDao.add(product);
//                        break;
//                    }
//                }
//                showProduct(product);
//                showListProducts(productDao.getListProduct());
//                showMessage("Thêm thành công!");
//                clearProductInfo();
//            }
//        }
//    }
//    
//    class EditProductListener implements ActionListener {
//        public void actionPerformed(ActionEvent e) {
//            Product product = getProductInfo();
//            if (product != null) {
//                productDao.edit(product);
//                showProduct(product);
//                showListProducts(productDao.getListProduct());
//                showMessage("Cập nhật thành công!");
//                clearProductInfo();
//            }
//        }
//    }
//    
//    class DeleteProductListener implements ActionListener {
//        public void actionPerformed(ActionEvent e) {
//            Product product = getProductInfo();
//            if (product != null) {
//                productDao.delete(product);
//                showProduct(product);
//                showListProducts(productDao.getListProduct());
//                showMessage("Xóa thành công!");
//                clearProductInfo();
//            }
//        }
//    }
//    
//    class ClearProductListener implements ActionListener {
//        public void actionPerformed(ActionEvent e) {
//            clearProductInfo();
//        }
//    }
//    
//    class SortProductNameListener implements ActionListener {
//        public void actionPerformed(ActionEvent e) {
//            productDao.sortProductByName();
//            showListProducts(productDao.getListProduct());
//        }
//    }
//    
//    class SortProductPriceListener implements ActionListener {
//        public void actionPerformed(ActionEvent e) {
//            productDao.sortProductByPrice();
//            showListProducts(productDao.getListProduct());
//        }
//    }
//    
//    class ListProductSelectionListener implements ListSelectionListener {
//        public void valueChanged(ListSelectionEvent e) {
//            fillProductFromSelectedRow();
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton add;
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maHang;
    private javax.swing.JTextField name;
    private javax.swing.JButton nameSort;
    private javax.swing.JTextField price;
    private javax.swing.JButton priceSort;
    private javax.swing.JTextField quantity;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}


